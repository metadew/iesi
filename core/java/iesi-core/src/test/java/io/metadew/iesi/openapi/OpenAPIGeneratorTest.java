package io.metadew.iesi.openapi;

import io.metadew.iesi.TestConfiguration;
import io.metadew.iesi.metadata.configuration.component.ComponentConfiguration;
import io.metadew.iesi.metadata.configuration.connection.ConnectionConfiguration;
import io.metadew.iesi.metadata.definition.component.Component;
import io.metadew.iesi.metadata.definition.component.ComponentParameter;
import io.metadew.iesi.metadata.definition.component.ComponentVersion;
import io.metadew.iesi.metadata.definition.component.key.ComponentKey;
import io.metadew.iesi.metadata.definition.component.key.ComponentParameterKey;
import io.metadew.iesi.metadata.definition.component.key.ComponentVersionKey;
import io.metadew.iesi.metadata.definition.connection.Connection;
import io.metadew.iesi.metadata.definition.connection.ConnectionParameter;
import io.metadew.iesi.metadata.definition.connection.key.ConnectionKey;
import io.metadew.iesi.metadata.definition.connection.key.ConnectionParameterKey;
import io.metadew.iesi.metadata.definition.environment.key.EnvironmentKey;
import io.metadew.iesi.metadata.definition.security.SecurityGroup;
import io.metadew.iesi.metadata.definition.security.SecurityGroupKey;
import io.metadew.iesi.metadata.service.security.SecurityGroupService;
import io.metadew.iesi.metadata.tools.IdentifierTools;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.nio.charset.StandardCharsets;
import java.util.*;

import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.doNothing;
import static org.mockito.Mockito.when;

@ExtendWith(SpringExtension.class)
@ContextConfiguration(classes = { TestConfiguration.class, OpenAPIGenerator.class, ComponentParser.class, ConnectionParser.class })
@ActiveProfiles("test")
class OpenAPIGeneratorTest {

    final SecurityGroupKey securityGroupKey = new SecurityGroupKey(UUID.randomUUID());
    byte[] docFile;
    byte[] wrongDocFile;
    String title;
    String version;


    @Autowired
    private OpenAPIGenerator openAPIGenerator;

    @MockBean
    private SecurityGroupService securityGroupService;

    @MockBean
    ComponentConfiguration componentConfiguration;

    @MockBean
    ConnectionConfiguration connectionConfiguration;


    @BeforeEach
    public void init() {
        String base64 = "";
        String wrongBase64 = "";
        docFile = Base64.getDecoder().decode(base64.getBytes(StandardCharsets.UTF_8));
        wrongDocFile = Base64.getDecoder().decode(wrongBase64.getBytes(StandardCharsets.UTF_8));
        title = "Swagger Petstore - OpenAPI 3.0";
        version = "1";

        when(securityGroupService.get("PUBLIC"))
                .thenReturn(Optional.of(new SecurityGroup(
                        securityGroupKey,
                        "PUBLIC",
                        new HashSet<>(),
                        new HashSet<>()
                )));

        doNothing()
                .when(componentConfiguration)
                .insert(any(Component.class));
        doNothing()
                .when(connectionConfiguration)
                .insert(any(Connection.class));
    }


    @Test
    void transformFromFile() throws IOException {
        File file = File.createTempFile("doc", null);
        try (OutputStream os = new FileOutputStream(file)) {
            os.write(docFile);
        }

        assertThat(openAPIGenerator.transformFromFile(file.getPath())).isEqualTo(getTransformResult());
    }

    @Test
    void transformFromWrongFile() throws IOException {
        File file = File.createTempFile("doc", null);
        List<String> messages = Collections.singletonList("attribute info.title is missing");
        String filePath = file.getPath();
        try (OutputStream os = new FileOutputStream(file)) {
            os.write(wrongDocFile);
        }

        SwaggerParserException exception = assertThrows(SwaggerParserException.class, () -> openAPIGenerator.transformFromFile(filePath));
        assertThat(exception.getMessages()).isEqualTo(messages);
    }


    private TransformResult getTransformResult() {
        EnvironmentKey environmentKey = new EnvironmentKey("env0");
        ConnectionKey connectionKey = new ConnectionKey(
                "Swagger Petstore - OpenAPI 3.0",
                environmentKey);
        ComponentKey componentKey = new ComponentKey(
                IdentifierTools.getComponentIdentifier("updatePet"),
                1L);
        ComponentVersionKey componentVersionKey = new ComponentVersionKey(componentKey);
        ConnectionParameter host = new ConnectionParameter(
                new ConnectionParameterKey(connectionKey, "host"),
                "petstore3.swagger.io");
        ConnectionParameter baseUrl = new ConnectionParameter(
                new ConnectionParameterKey(connectionKey, "baseUrl"),
                "/api/v3/");
        ConnectionParameter tls = new ConnectionParameter(
                new ConnectionParameterKey(connectionKey, "tls"),
                "Y");
        Connection connection = new Connection(connectionKey, securityGroupKey, "PUBLIC", "http", "small description", Arrays.asList(baseUrl, host, tls));


        ComponentParameter endpoint = new ComponentParameter(
                new ComponentParameterKey(componentKey, "endpoint"),
                "/pet"
        );
        ComponentParameter type = new ComponentParameter(
                new ComponentParameterKey(componentKey, "type"),
                "PUT"
        );
        ComponentParameter connectionParam = new ComponentParameter(
                new ComponentParameterKey(componentKey, "connection"),
                "Swagger Petstore - OpenAPI 3.0"
        );
        Component component = new Component(
                componentKey,
                securityGroupKey,
                "PUBLIC",
                "http.request",
                "updatePet",
                "Update an existing pet by Id",
                new ComponentVersion(componentVersionKey, "Update an existing pet by Id"),
                Arrays.asList(endpoint, type, connectionParam),
                new ArrayList<>()
        );

        return new TransformResult(Collections.singletonList(connection), Collections.singletonList(component), title, version);
    }
}
